aqua Main

import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/builtin.aqua"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-lib/subnet.aqua"
import "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/aqua-ipfs/ipfs.aqua"

import "./helpers.aqua"
import "./types.aqua"
import "./services.aqua"

import Spell, Log from "../../.fluence/aqua-dependencies/node_modules/@fluencelabs/spell/spell_service.aqua"

export run, subnet

const REMOTEKUBO = "/ip4/143.176.14.172/tcp/15001"
const SUBNETKUBO = "/dns4/ipfs/tcp/5001"

func subnet() -> bool: 

    wrkrs = getMembersWorkers()
    Console.print(wrkrs)
    <- true

func run() -> bool:

    Console.print("starting")

    subscriptions: *MemSubscription
    queue: *[]MemContentObject

    logString = (s: string):
        Console.print(s)

    logSub = (s: MemSubscription):
        Console.print(s)

    logCo = (s: MemContentObject):
        Console.print(s)

    mw = randomMembersWorker()
    Console.print(mw)
    on mw.worker_id! via mw.host_id:
        members = MemSubscriptions.fetch()
        for cid <- members:
            logString(cid)
            res <- MemKubo.get(SUBNETKUBO, cid)
            logString(res)
            subscriptions <- MemSubscriptionFromJson.parse(res)

    for sub <- subscriptions:

        logSub(sub)

        dw = randomDataWorker()
        Console.print(dw)
        on dw.worker_id! via dw.host_id:
            queue <- MemData.add(sub)
            -- for error <- errors:
            --     logString(error)
            -- greeting <- Test.greeting("Artur")
            -- logString(greeting)

    for q <- queue:
        for obj <- q:
            logCo(obj)

    <- true

